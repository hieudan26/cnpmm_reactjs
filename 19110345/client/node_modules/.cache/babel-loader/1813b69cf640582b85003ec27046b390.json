{"ast":null,"code":"// src/use-counter.ts\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\nfunction useCounter() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    if (defaultValue == null) return \"\";\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp ?? decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    let next;\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min;\n    }\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    const nextValue = cast(value2, stepProp, precision) ?? min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision ?? decimalPlaces);\n}\nexport { useCounter };","map":{"version":3,"names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","cast","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","value2","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","parseFloat","replace","Math","parsedValue","isNaN"],"sources":["C:/Users/hieud/OneDrive/Máy tính/cnpmm/cnmmweek6/19110345/client/node_modules/@chakra-ui/counter/dist/index.esm.js"],"sourcesContent":["// src/use-counter.ts\r\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\r\nimport {\r\n  clampValue,\r\n  countDecimalPlaces,\r\n  toPrecision\r\n} from \"@chakra-ui/number-utils\";\r\nimport { useCallback, useState } from \"react\";\r\nfunction useCounter(props = {}) {\r\n  const {\r\n    onChange,\r\n    precision: precisionProp,\r\n    defaultValue,\r\n    value: valueProp,\r\n    step: stepProp = 1,\r\n    min = Number.MIN_SAFE_INTEGER,\r\n    max = Number.MAX_SAFE_INTEGER,\r\n    keepWithinRange = true\r\n  } = props;\r\n  const onChangeProp = useCallbackRef(onChange);\r\n  const [valueState, setValue] = useState(() => {\r\n    if (defaultValue == null)\r\n      return \"\";\r\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\";\r\n  });\r\n  const isControlled = typeof valueProp !== \"undefined\";\r\n  const value = isControlled ? valueProp : valueState;\r\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\r\n  const precision = precisionProp ?? decimalPlaces;\r\n  const update = useCallback((next) => {\r\n    if (next === value)\r\n      return;\r\n    if (!isControlled) {\r\n      setValue(next.toString());\r\n    }\r\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\r\n  }, [onChangeProp, isControlled, value]);\r\n  const clamp = useCallback((value2) => {\r\n    let nextValue = value2;\r\n    if (keepWithinRange) {\r\n      nextValue = clampValue(nextValue, min, max);\r\n    }\r\n    return toPrecision(nextValue, precision);\r\n  }, [precision, keepWithinRange, max, min]);\r\n  const increment = useCallback((step = stepProp) => {\r\n    let next;\r\n    if (value === \"\") {\r\n      next = parse(step);\r\n    } else {\r\n      next = parse(value) + step;\r\n    }\r\n    next = clamp(next);\r\n    update(next);\r\n  }, [clamp, stepProp, update, value]);\r\n  const decrement = useCallback((step = stepProp) => {\r\n    let next;\r\n    if (value === \"\") {\r\n      next = parse(-step);\r\n    } else {\r\n      next = parse(value) - step;\r\n    }\r\n    next = clamp(next);\r\n    update(next);\r\n  }, [clamp, stepProp, update, value]);\r\n  const reset = useCallback(() => {\r\n    let next;\r\n    if (defaultValue == null) {\r\n      next = \"\";\r\n    } else {\r\n      next = cast(defaultValue, stepProp, precisionProp) ?? min;\r\n    }\r\n    update(next);\r\n  }, [defaultValue, precisionProp, stepProp, update, min]);\r\n  const castValue = useCallback((value2) => {\r\n    const nextValue = cast(value2, stepProp, precision) ?? min;\r\n    update(nextValue);\r\n  }, [precision, stepProp, update, min]);\r\n  const valueAsNumber = parse(value);\r\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\r\n  const isAtMax = valueAsNumber === max;\r\n  const isAtMin = valueAsNumber === min;\r\n  return {\r\n    isOutOfRange,\r\n    isAtMax,\r\n    isAtMin,\r\n    precision,\r\n    value,\r\n    valueAsNumber,\r\n    update,\r\n    reset,\r\n    increment,\r\n    decrement,\r\n    clamp,\r\n    cast: castValue,\r\n    setValue\r\n  };\r\n}\r\nfunction parse(value) {\r\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\r\n}\r\nfunction getDecimalPlaces(value, step) {\r\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\r\n}\r\nfunction cast(value, step, precision) {\r\n  const parsedValue = parse(value);\r\n  if (Number.isNaN(parsedValue))\r\n    return void 0;\r\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\r\n  return toPrecision(parsedValue, precision ?? decimalPlaces);\r\n}\r\nexport {\r\n  useCounter\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}