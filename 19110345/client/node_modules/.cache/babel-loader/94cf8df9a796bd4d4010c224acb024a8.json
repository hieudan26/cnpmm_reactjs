{"ast":null,"code":"import { useMotionValue } from './use-motion-value.mjs';\nimport { useMultiOnChange } from './use-on-change.mjs';\nimport sync, { cancelSync } from 'framesync';\nfunction useCombineMotionValues(values, combineValues) {\n  /**\r\n   * Initialise the returned motion value. This remains the same between renders.\r\n   */\n  const value = useMotionValue(combineValues());\n  /**\r\n   * Create a function that will update the template motion value with the latest values.\r\n   * This is pre-bound so whenever a motion value updates it can schedule its\r\n   * execution in Framesync. If it's already been scheduled it won't be fired twice\r\n   * in a single frame.\r\n   */\n  const updateValue = () => value.set(combineValues());\n  /**\r\n   * Synchronously update the motion value with the latest values during the render.\r\n   * This ensures that within a React render, the styles applied to the DOM are up-to-date.\r\n   */\n  updateValue();\n  /**\r\n   * Subscribe to all motion values found within the template. Whenever any of them change,\r\n   * schedule an update.\r\n   */\n  useMultiOnChange(values, () => sync.update(updateValue, false, true), () => cancelSync.update(updateValue));\n  return value;\n}\nexport { useCombineMotionValues };","map":{"version":3,"names":["useMotionValue","useMultiOnChange","sync","cancelSync","useCombineMotionValues","values","combineValues","value","updateValue","set","update"],"sources":["C:/Users/hieud/OneDrive/Máy tính/cnpmm/cnmmweek6/19110345/client/node_modules/framer-motion/dist/es/value/use-combine-values.mjs"],"sourcesContent":["import { useMotionValue } from './use-motion-value.mjs';\r\nimport { useMultiOnChange } from './use-on-change.mjs';\r\nimport sync, { cancelSync } from 'framesync';\r\n\r\nfunction useCombineMotionValues(values, combineValues) {\r\n    /**\r\n     * Initialise the returned motion value. This remains the same between renders.\r\n     */\r\n    const value = useMotionValue(combineValues());\r\n    /**\r\n     * Create a function that will update the template motion value with the latest values.\r\n     * This is pre-bound so whenever a motion value updates it can schedule its\r\n     * execution in Framesync. If it's already been scheduled it won't be fired twice\r\n     * in a single frame.\r\n     */\r\n    const updateValue = () => value.set(combineValues());\r\n    /**\r\n     * Synchronously update the motion value with the latest values during the render.\r\n     * This ensures that within a React render, the styles applied to the DOM are up-to-date.\r\n     */\r\n    updateValue();\r\n    /**\r\n     * Subscribe to all motion values found within the template. Whenever any of them change,\r\n     * schedule an update.\r\n     */\r\n    useMultiOnChange(values, () => sync.update(updateValue, false, true), () => cancelSync.update(updateValue));\r\n    return value;\r\n}\r\n\r\nexport { useCombineMotionValues };\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,wBAAwB;AACvD,SAASC,gBAAgB,QAAQ,qBAAqB;AACtD,OAAOC,IAAI,IAAIC,UAAU,QAAQ,WAAW;AAE5C,SAASC,sBAAsB,CAACC,MAAM,EAAEC,aAAa,EAAE;EACnD;AACJ;AACA;EACI,MAAMC,KAAK,GAAGP,cAAc,CAACM,aAAa,EAAE,CAAC;EAC7C;AACJ;AACA;AACA;AACA;AACA;EACI,MAAME,WAAW,GAAG,MAAMD,KAAK,CAACE,GAAG,CAACH,aAAa,EAAE,CAAC;EACpD;AACJ;AACA;AACA;EACIE,WAAW,EAAE;EACb;AACJ;AACA;AACA;EACIP,gBAAgB,CAACI,MAAM,EAAE,MAAMH,IAAI,CAACQ,MAAM,CAACF,WAAW,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,MAAML,UAAU,CAACO,MAAM,CAACF,WAAW,CAAC,CAAC;EAC3G,OAAOD,KAAK;AAChB;AAEA,SAASH,sBAAsB"},"metadata":{},"sourceType":"module"}