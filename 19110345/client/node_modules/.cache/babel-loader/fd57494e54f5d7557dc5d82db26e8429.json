{"ast":null,"code":"import { useContext, useRef, useMemo } from 'react';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useOnChange } from './use-on-change.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n\n/**\r\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\r\n *\r\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\r\n * to another `MotionValue`.\r\n *\r\n * @remarks\r\n *\r\n * ```jsx\r\n * const x = useSpring(0, { stiffness: 300 })\r\n * const y = useSpring(x, { damping: 10 })\r\n * ```\r\n *\r\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\r\n * @param springConfig - Configuration options for the spring.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\nfunction useSpring(source) {\n  let config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    isStatic\n  } = useContext(MotionConfigContext);\n  const activeSpringAnimation = useRef(null);\n  const value = useMotionValue(isMotionValue(source) ? source.get() : source);\n  useMemo(() => {\n    return value.attach((v, set) => {\n      /**\r\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\r\n       * at that level, but this will work for now\r\n       */\n      if (isStatic) return set(v);\n      if (activeSpringAnimation.current) {\n        activeSpringAnimation.current.stop();\n      }\n      activeSpringAnimation.current = animate({\n        from: value.get(),\n        to: v,\n        velocity: value.getVelocity(),\n        ...config,\n        onUpdate: set\n      });\n      return value.get();\n    });\n  }, [JSON.stringify(config)]);\n  useOnChange(source, v => value.set(parseFloat(v)));\n  return value;\n}\nexport { useSpring };","map":{"version":3,"names":["useContext","useRef","useMemo","animate","isMotionValue","useMotionValue","useOnChange","MotionConfigContext","useSpring","source","config","isStatic","activeSpringAnimation","value","get","attach","v","set","current","stop","from","to","velocity","getVelocity","onUpdate","JSON","stringify","parseFloat"],"sources":["C:/Users/hieud/OneDrive/Máy tính/cnpmm/cnmmweek6/19110345/client/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"sourcesContent":["import { useContext, useRef, useMemo } from 'react';\r\nimport { animate } from 'popmotion';\r\nimport { isMotionValue } from './utils/is-motion-value.mjs';\r\nimport { useMotionValue } from './use-motion-value.mjs';\r\nimport { useOnChange } from './use-on-change.mjs';\r\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\r\n\r\n/**\r\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\r\n *\r\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\r\n * to another `MotionValue`.\r\n *\r\n * @remarks\r\n *\r\n * ```jsx\r\n * const x = useSpring(0, { stiffness: 300 })\r\n * const y = useSpring(x, { damping: 10 })\r\n * ```\r\n *\r\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\r\n * @param springConfig - Configuration options for the spring.\r\n * @returns `MotionValue`\r\n *\r\n * @public\r\n */\r\nfunction useSpring(source, config = {}) {\r\n    const { isStatic } = useContext(MotionConfigContext);\r\n    const activeSpringAnimation = useRef(null);\r\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\r\n    useMemo(() => {\r\n        return value.attach((v, set) => {\r\n            /**\r\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\r\n             * at that level, but this will work for now\r\n             */\r\n            if (isStatic)\r\n                return set(v);\r\n            if (activeSpringAnimation.current) {\r\n                activeSpringAnimation.current.stop();\r\n            }\r\n            activeSpringAnimation.current = animate({\r\n                from: value.get(),\r\n                to: v,\r\n                velocity: value.getVelocity(),\r\n                ...config,\r\n                onUpdate: set,\r\n            });\r\n            return value.get();\r\n        });\r\n    }, [JSON.stringify(config)]);\r\n    useOnChange(source, (v) => value.set(parseFloat(v)));\r\n    return value;\r\n}\r\n\r\nexport { useSpring };\r\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,MAAM,EAAEC,OAAO,QAAQ,OAAO;AACnD,SAASC,OAAO,QAAQ,WAAW;AACnC,SAASC,aAAa,QAAQ,6BAA6B;AAC3D,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,mBAAmB,QAAQ,oCAAoC;;AAExE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAAS,CAACC,MAAM,EAAe;EAAA,IAAbC,MAAM,uEAAG,CAAC,CAAC;EAClC,MAAM;IAAEC;EAAS,CAAC,GAAGX,UAAU,CAACO,mBAAmB,CAAC;EACpD,MAAMK,qBAAqB,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC1C,MAAMY,KAAK,GAAGR,cAAc,CAACD,aAAa,CAACK,MAAM,CAAC,GAAGA,MAAM,CAACK,GAAG,EAAE,GAAGL,MAAM,CAAC;EAC3EP,OAAO,CAAC,MAAM;IACV,OAAOW,KAAK,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,GAAG,KAAK;MAC5B;AACZ;AACA;AACA;MACY,IAAIN,QAAQ,EACR,OAAOM,GAAG,CAACD,CAAC,CAAC;MACjB,IAAIJ,qBAAqB,CAACM,OAAO,EAAE;QAC/BN,qBAAqB,CAACM,OAAO,CAACC,IAAI,EAAE;MACxC;MACAP,qBAAqB,CAACM,OAAO,GAAGf,OAAO,CAAC;QACpCiB,IAAI,EAAEP,KAAK,CAACC,GAAG,EAAE;QACjBO,EAAE,EAAEL,CAAC;QACLM,QAAQ,EAAET,KAAK,CAACU,WAAW,EAAE;QAC7B,GAAGb,MAAM;QACTc,QAAQ,EAAEP;MACd,CAAC,CAAC;MACF,OAAOJ,KAAK,CAACC,GAAG,EAAE;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,CAACW,IAAI,CAACC,SAAS,CAAChB,MAAM,CAAC,CAAC,CAAC;EAC5BJ,WAAW,CAACG,MAAM,EAAGO,CAAC,IAAKH,KAAK,CAACI,GAAG,CAACU,UAAU,CAACX,CAAC,CAAC,CAAC,CAAC;EACpD,OAAOH,KAAK;AAChB;AAEA,SAASL,SAAS"},"metadata":{},"sourceType":"module"}